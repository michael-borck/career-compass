name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Build Electron app for macOS
        if: matrix.os == 'macos-latest'
        run: npm run electron:dist
        env:
          # macOS code signing (optional - add your certificates to secrets)
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # Apple notarization (optional)
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app for Windows
        if: matrix.os == 'windows-latest'
        run: npm run electron:dist
        env:
          # Windows code signing (optional - add your certificate to secrets)
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run electron:dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/*.dmg

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/*.exe

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/*.AppImage

  publish:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Career Compass ${{ github.ref_name }}
          body: |
            ## Career Compass ${{ github.ref_name }}
            
            Privacy-first career exploration powered by AI.
            
            ### Downloads
            - **Windows**: Download the `.exe` installer
            - **macOS**: Download the `.dmg` file  
            - **Linux**: Download the `.AppImage` file
            
            ### Features
            - ✅ Multiple LLM providers (OpenAI, Claude, Gemini, Groq, Ollama)
            - ✅ Local file processing (PDF, Markdown, DOCX)
            - ✅ Privacy-first architecture
            - ✅ No external data transmission
            - ✅ Secure API key storage
            
            ### Installation
            1. Download the appropriate file for your operating system
            2. **Windows**: Run the installer and follow the setup wizard
            3. **macOS**: Open the DMG and drag to Applications folder
            4. **Linux**: Make the AppImage executable and run it
            
            For detailed setup instructions, see the [README](https://github.com/michael-borck/career-compass#readme).
          draft: false
          prerelease: false

      - name: Find and upload release assets
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF_NAME#v}
          
          # Find and upload macOS assets
          for file in ./artifacts/macos-build/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done
          
          # Find and upload Windows assets
          for file in ./artifacts/windows-build/*.exe; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done
          
          # Find and upload Linux assets
          for file in ./artifacts/linux-build/*.AppImage; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}